(ns phel-nrepl\repl-utils
  (:use Phel\Lang\Symbol)
  (:use Phel\Lang\Registry)
  (:use Phel\Build\BuildFacade)
  (:use Phel\Compiler\CompilerFacade)
  (:use Phel\Compiler\Infrastructure\CompileOptions)
  (:use Phel\Compiler\Infrastructure\GlobalEnvironmentSingleton)
  (:use Phel\Compiler\Domain\Analyzer\Environment\NodeEnvironment)
  (:use Phel\Printer\Printer))

## Adapted from https://github.com/phel-lang/phel-lang/blob/8b0a5183a007755c9d715d4f7fe3a89947519057/src/phel/repl.phel
## With changes to work during custom REPL session

(def build-facade (php/new BuildFacade))

(defn get-backtrace-object
  "Fetch object from backtrace by classname e.g. Phel\\Run\\RunFacade"
  [classname]
  (let [backtrace (php/debug_backtrace php/DEBUG_BACKTRACE_PROVIDE_OBJECT)
        frames-with-object (filter |(contains-value? (keys $) "object") backtrace)
        matching-frame (first (filter |(= (get $ "class") classname) frames-with-object))]
        (get matching-frame "object")))

(defn get-runfacade [] (get-backtrace-object "Phel\\Run\\RunFacade"))


(def- src-dirs (to-php-array
                (apply (partial vector "/home/user/dev/phel-nrepl/src")
                       (php/-> (get-runfacade) (getAllPhelDirectories))))) # Will be set by the repl command
## (def- src-dirs (php/array)) # Will be set by the repl command

(defn- get-global-env []
  (php/:: GlobalEnvironmentSingleton (getInstance)))

(defn- loaded-namespaces []
  (php/-> (php/:: Registry (getInstance)) (getNamespaces)))

(defn- eval-file [file]
  (php/-> build-facade (evalFile file)))

(defn eval-namespace [namespace]
  (let [dependencies (php/-> build-facade (getDependenciesForNamespace src-dirs (php/array namespace)))]
    (foreach [dep dependencies]
      (when-not (php/in_array (php/-> dep (getNamespace)) (loaded-namespaces))
        (eval-file (php/-> dep (getFile)))))))

(defn resolve
  "Resolves the given symbol in the current environment and returns a
   resolved Symbol with the absolute namespace or nil if it cannot be resolved."
  [sym]
  (-> (get-global-env)
      (php/-> (resolveAsSymbol sym (php/:: NodeEnvironment (empty))))))

(defn- clean-doc [str]
  (php/trim (php/str_replace (php/array "```phel\n" "```") "" str)))

(defn- find-doc [namespace name]
  (let [registry (php/:: Registry (getInstance))
        meta (php/-> registry (getDefinitionMetaData namespace name))]
    (when meta
      (clean-doc (get meta :doc)))))

(defmacro doc
  "Prints the documentation for the given symbol."
  [sym]
  (let [resolved-sym (resolve sym)]
    (when resolved-sym
      `(println (find-doc ,(namespace resolved-sym) ,(name resolved-sym))))))

(defn- extract-alias [sym options]
  (if (:as options)
    (:as options)
    (let [parts (php/explode "\\" (name sym))
          last (pop parts)]
      (php/:: Symbol (create last)))))

(defn- set-ns [namespace]
  (set-var *ns* namespace))

(defn require-namespace
  [namespace alias refers]
  (let [env (get-global-env)
        current-ns (php/-> (get-global-env) (getNs))]  # BUG?: was *ns* which ends having lowcased hyphens:
    ## phel-nrepl\nrepl does not work with require as it does not mangle import properly:
    ## (get-instance-private-property (get-global-env) "ns") #=> phel_nrepl\nrepl
    ## *ns* #=> phel_nrepl\nrepl

    (php/-> env (addRequireAlias current-ns alias namespace))
    (foreach [r refers]
      (php/-> env (addRefer current-ns r namespace)))
    (eval-namespace namespace)
    (php/-> (get-global-env) (setNs current-ns))
    (set-ns current-ns)
    namespace))

(defmacro require
  "Requires a Phel module into the environment."
  [sym & args]
  (let [options (apply hash-map args)
        alias (extract-alias sym options)
        refers (or (:refer options) [])]
    `(require-namespace ',sym ',alias ',refers)))

(defn- use-namespace
  [namespace alias]
  (php/-> (get-global-env) (addUseAlias *ns* alias namespace))
  namespace)

(defmacro use
  "Adds a use statement to the environment."
  [sym & args]
  (let [options (apply hash-map args)
        alias (extract-alias sym options)]
    `(use-namespace ',sym ',alias)))

(defn- print-colorful-str
  "Same as print-str from core, but with color."
  [& xs]
  (let [len (count xs)
        printer (php/:: Printer (nonReadableWithColor))
        pp |(php/-> printer (print $))]
    (case (count xs)
      0 ""
      1 (pp (first xs))
      (loop [res (pp (first xs))
             seq (next xs)]
        (if seq
          (recur (str res " " (pp (first seq))) (next seq))
          res)))))

(defn print-colorful
  "Colored print."
  [& xs]
  (php/print (apply print-colorful-str xs))
  nil)

(defn println-colorful
  "Colored println."
  [& xs]
  (apply print-colorful xs)
  (php/print "\n")
  nil)

(defn compile-str [s]
  (let [cf (php/new CompilerFacade)
        opts (php/new CompileOptions)
        res (php/-> cf (compile s opts))]
    (php/-> res (getCode))))


(comment
  ## REPL experimentation (in nrepl.phel ns) which led to finding that src-dirs in repl.phel needs to be modified to make it work

  (require phel\html :refer [raw-string])

  (require-namespace 'phel\html 'html ['raw-string])

  ## Eval all files as in ReplCommand.php
  (map identity (php/-> (get-runfacade) (getAllPhelDirectories)))
  (apply (partial vector "/home/user/dev/phel-nrepl/src") (php/-> (get-runfacade) (getAllPhelDirectories)))

  (def ns-infos (let [run-facade (get-runfacade)
                      source-dirs (apply (partial vector "/home/user/dev/phel-nrepl/src")
                                         (php/-> (get-runfacade) (getAllPhelDirectories)))]
    (php/-> run-facade (getDependenciesForNamespace
                        (to-php-array source-dirs)
                        (to-php-array ["phelnrepl" "phel\\core"])))))

  ## This changes (leaves) ns to phel\http after scanning all

  (dofor [i :in ns-infos]
         (php/-> (get-runfacade) (evalFile i)))

  ## This attempts to start server again which fails with socket already being in use

  (get-instance-private-property (get-global-env) "ns") # => phel\\http

  (set-instance-private-property (get-global-env) "ns" "phelnrepl")

  ## Registry::getInstance()->addDefinition('phel\\repl', 'src-dirs', $srcDirectories);

  (php/-> (php/:: \Phel\Lang\Registry (getInstance))
          (addDefinition "phelnrepl" "src-dirs"
                         (apply (partial vector "/home/user/dev/phel-nrepl/src")
                                         (php/-> (get-runfacade) (getAllPhelDirectories)))))
  )
