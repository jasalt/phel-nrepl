(ns require-test)

## Require test, source:
## https://github.com/phel-lang/phel-lang/blob/main/src/phel/repl.phel


## TODO vanilla REPL runs this, is it needed here?
## https://github.com/phel-lang/phel-lang/blob/8b0a5183a007755c9d715d4f7fe3a89947519057/src/php/Run/Infrastructure/Command/ReplCommand.php#L99


(php/:: \Phel\Command\CommandFacade (getAllPhelDirectories))

## (php/:: \Phel\Run\RunFacade (getAllPhelDirectories)) # not possible

(def frames-with-object (filter |(contains-value? (keys $) "object") (php/debug_backtrace php/DEBUG_BACKTRACE_PROVIDE_OBJECT)))

(def this-runfacade
  (-> (filter |(= (get $ "class") "Phel\\Run\\RunFacade") frames-with-object)
      (first)
      (get "object")))

## // Ugly Hack: Set source directories for the REPL
## Registry::getInstance()->addDefinition('phel\\repl', 'src-dirs', $srcDirectories);

## pphel repl # does a call first (tracing Phel\Lang\Registry::addDefinition):

## 0.0000,"Phel\Lang\Registry::addDefinition","[
##     ""phel\\repl"",
##     ""src-dirs"",
##     [],
##     {
##         ""class"": ""Phel\\Lang\\Collections\\Map\\PersistentArrayMap"",
##         ""data"": {
##             ""string"": ""{:private true :start-location {:file \"\/home\/user\/dev\/phel-nrepl\/vendor\/phel-lang\/phe
## l-lang\/src\/phel\/repl.phel\" :line 13 :column 0} :end-location {:file \"\/home\/user\/dev\/phel-nrepl\/vendor\/phel-l
## ang\/phel-lang\/src\/phel\/repl.phel\" :line 13 :column 27}}""
##         }
##     }
## ]"


## ends with as result of the code above:

## 0.0000,"Phel\Lang\Registry::addDefinition","[
##     ""phel\\repl"",
##     ""src-dirs"",
##     [
##         ""\/home\/user\/dev\/phel-nrepl\/vendor\/phel-lang\/phel-lang\/src\/php\/Run\/Domain\/Repl"",
##         ""\/home\/user\/dev\/phel-nrepl\/vendor\/phel-lang\/phel-lang\/src\/php\/Command\/..\/..\/"",
##         ""src"",
##         ""\/home\/user\/dev\/phel-nrepl\/tests"",
##         ""\/home\/user\/dev\/phel-nrepl\/vendor\/phel-lang\/phel-lang\/src\/phel""
##     ]
## ]"##

## pphel run src/nrepl # has this before also:
## 0.0000,"Phel\Lang\Registry::addDefinition","[
##     ""phel\\repl"",
##     ""src-dirs"",
##     [],
##     {
##         ""class"": ""Phel\\Lang\\Collections\\Map\\PersistentArrayMap"",
##         ""data"": {
##             ""string"": ""{:private true :start-location {:file \"\/home\/user\/dev\/phel-nrepl\/vendor\/phel-lang\/phe
## l-lang\/src\/phel\/repl.phel\" :line 13 :column 0} :end-location {:file \"\/home\/user\/dev\/phel-nrepl\/vendor\/phel-l
## ang\/phel-lang\/src\/phel\/repl.phel\" :line 13 :column 27}}""
##         }
##     }
## ]"


(php/-> (php/:: \Phel\Lang\Registry (getInstance))
        (getNamespaces))
## repl: <PHP-Array [phel\core, phel\repl]>
## nrepl: => ["phel\\core" "phel\\str" "phel_nrepl\\util" "phel_nrepl\\nrepl"]  # ns-form requires


(php/-> (php/:: \Phel\Lang\Registry (getInstance))
        (addDefinition "phel\\repl" "src-dirs"
                       (to-php-array
                        ["\/home\/user\/dev\/phel-nrepl\/vendor\/phel-lang\/phel-lang\/src\/php\/Run\/Domain\/Repl"
                         "\/home\/user\/dev\/phel-nrepl\/vendor\/phel-lang\/phel-lang\/src\/php\/Command\/..\/..\/"
                         "src"
                         "\/home\/user\/dev\/phel-nrepl\/tests"
                         "\/home\/user\/dev\/phel-nrepl\/vendor\/phel-lang\/phel-lang\/src\/phel"])))




#####

(def build-facade (php/new \Phel\Build\BuildFacade))

(def- src-dirs (php/array))

(defn- get-global-env []
  (php/:: \Phel\Compiler\Infrastructure\GlobalEnvironmentSingleton (getInstance)))

(defn- loaded-namespaces []
  (php/-> (php/:: \Phel\Lang\Registry (getInstance)) (getNamespaces)))


(defn- eval-file [file]
  (php/-> build-facade (evalFile file)))

(defn- eval-namespace [namespace]
  (let [dependencies (php/-> build-facade (getDependenciesForNamespace src-dirs (php/array namespace)))]
    (foreach [dep dependencies]
      (when-not (php/in_array (php/-> dep (getNamespace)) (loaded-namespaces))
        (eval-file (php/-> dep (getFile)))))))

(defn- extract-alias [sym options]
  (if (:as options)
    (:as options)
    (let [parts (php/explode "\\" (name sym))
          last (pop parts)]
      (php/:: \Phel\Lang\Symbol (create last)))))

(defn- set-ns [namespace]
  (set-var *ns* namespace))

(defn- require-namespace
  [namespace alias refers]
  (let [env (get-global-env)
        current-ns *ns*]   # TODO the *ns* might need a change
    (php/-> env (addRequireAlias current-ns alias namespace))
    (foreach [r refers]
             (php/-> env (addRefer current-ns r namespace)))
    (eval-namespace namespace)
    (php/-> (get-global-env) (setNs current-ns))
    (set-ns current-ns)
    namespace))

(require-namespace phel\html html [])  # Cannot resolve symbol 'phel\str'

(defmacro require
  "Requires a Phel module into the environment."
  [sym & args]
  (let [options (apply hash-map args)
        alias (extract-alias sym options)
        refers (or (:refer options) [])]
    `(require-namespace ',sym ',alias ',refers)))



(require phel\html :as html) # Cannot resolve symbol 'phel\html'

(type html/html)  # Cannot resolve symbol 'html/html'

(require-namespace 'phel\html 'html ['raw-string])

(require 'phel\html :as 'html)
