(ns phel-nrepl\util
  #(:require phel-nrepl\repl :as repl)
  ##(:require phel\repl :as repl)
  (:require phel\repl :refer [doc require use print-colorful println-colorful])
  (:require phel\str :as str) # TODO requiring phel\str fails, won't resolve
  )

(defn dd
  "Dump and die."
  [x]
  (println x)(php/die))

(defn get-from-list [xs key default & [split]]
  (let [arg (find |(php/str_contains (or $ "") key) xs)]
    (if (empty? arg)
      default
      (php/intval (get (php/explode (or split "=") arg) 1)))))

(defn callable->closure
  "Converts callable such as Phel\Lang\AbstractFn into a closure that is often
  expected by AMPHP"
  [phel-fn]
  (php/:: \Closure (fromCallable phel-fn)))

(defn show-user-defined
  "List 'user' definitions to see which \Amp functions are available.
   AFAIK Phel does not have syntax for requiring them explicitly in ns form e.g. from:
   https://github.com/amphp/amp/blob/7cf7fef3d667bfe4b2560bc87e67d5387a7bcde9/src/functions.php"
  []
  (php/aget (php/get_defined_functions) "user"))

(defn phel-compile [s]  # TODO (compile (read-string expr))
  (let [cf (php/new \Phel\Compiler\CompilerFacade)
        opts (php/new \Phel\Compiler\Infrastructure\CompileOptions)
        res (php/-> cf (compile s opts))]
    (php/-> res (getPhpCode))))


## (defn phel-eval [s]  # TODO remove as (eval (read-string x)) is better
##   (let [opts (php/new \Phel\Compiler\Infrastructure\CompileOptions)
##         rf (php/new \Phel\Run\RunFacade)]
##   (php/-> rf (eval s opts))))


## ILT utils
## Source: https://codeberg.org/mmontone/interactive-lang-tools/

(defn partialr [f & args1]
  "partial right"
  (fn [& args2]
    (apply f (concat args2 args1))))

# ((partialr str "lala") "foo")

(defn- clean-doc [str]
  (php/trim (php/str_replace (php/array "```phel\n" "```") "" str)))

(defn read-php-obj-prop [obj prop]
  (let [r (php/new \ReflectionObject obj)
        p (php/-> r (getProperty prop))]
    (php/-> p (setAccessible true))
    (php/-> p (getValue obj))))

# Hack to access Phel registry private definitions data
(defn registry-definitions []
  (read-php-obj-prop (php/:: \Phel\Lang\Registry (getInstance))
                     "definitions"))

(defn namespaces-list []
  (php/array_keys (registry-definitions)))

# (namespaces-list)

(defn namespace-definitions [namespace]
  (-> (registry-definitions)
     (php/aget namespace)
     (php/array_keys)))

# (count (namespace-definitions "phel\core"))
# (count (->> (registry-definitions) (php/array_values) (mapcat php/array_keys)))

(defn- ilt-kind-of [type]
  type)

## JSONRPC protocol

(defn- php-func-args [fname]
  (->>
   (php/-> (php/new \ReflectionFunction fname) (getParameters))
   (map (fn [param] {:name (php/-> param (getName))
                    :type (php/-> param (getType))}))))

# (php-func-args "array_merge")

(defn get-def-meta-data [namespace name]
  (let [registry (php/:: \Phel\Lang\Registry (getInstance))]
    (php/-> registry (getDefinitionMetaData "phel\core" name))))

(defn make-definition [name type kind]
  (let [def {:id name
             :name name
             :module "TODO"
             :type type
             :kind kind}]
    (case kind
      "function"
      (cond
        # php func
        (php/function_exists name)
        (-> def
           (put :args (php-func-args name)))

        # phel fun
        (get-def-meta-data "phel\core" name)
        (let [doc (-> (get-def-meta-data "phel\core" name)
                     (get :doc)
                     (clean-doc))
              args-and-doc (apply vector (php/explode "\n" doc))]
          (-> def
              (put :args (get args-and-doc 0))
              (put :doc (php/implode "\n" (to-php-array (rest args-and-doc ))))))
        # default
        def)
      def)))

# (make-definition "array_merge" "function" "function")
# (make-definition "str" "function" "function")

# Functions used for generating tables for completions

(defn all-phel-def-names []
  (->> (registry-definitions)
       (php/array_values)
       (mapcat php/array_keys)))

# (all-phel-def-names)

(defn all-php-def-names []
  (let [functions (php/get_defined_functions)
        internal-functions (get functions "internal")
        user-functions (get functions "external")]
    (map str (concat internal-functions user-functions))))


## REFACTOR: should probably resolve this info earlier
(defn resolve-completion-type-phel [s]
  (cond (function? s) "function"
        (keyword? s) "keyword"
        true "?")
  )
## Phel
## ("function" "f")
## ("keyword" "k")
## ("var" "v")
## ("macro" "m")  # how to distinct phel function from macro?
## ("namespace" "n")


## TODO refactor
(defn resolve-completion-type-php [s]
  (cond (function? s) "function"
        (php-object? s) "class"  # TODO
        (php-resource? s) "class" # TODO
        true "?")
  )
## PHP
## ("class" "c")  # complete by startwith \ (?)
## ("static-method" "sm")
## ("field" "fi")
## ("import" "i")
## ("local" "l")
## ("method" "me")
## ("protocol" "p")
## ("protocol-function" "pf")
## ("record" "r")
## ("special-form" "s")
## ("static-field" "sf")
## ("type" "t")

## NOTE: cider-completion-annotations-alist defines supported types

## (all-php-def-names)
## type: function, variable, namespace
(defn complete "return list of completions for string" [what]
  (cond
    # If the thing to complete starts with php/, then return php completions.
   (php/str_starts_with what "php/")
   (let [what-to-complete (php/substr what 4)]
     (let [functions (php/get_defined_functions)
           internal-functions (get functions "internal")
           user-functions (get functions "user")

           completions-v (map (partial str "php/")
                              (filter (partialr php/str_starts_with what-to-complete)
                                      (concat internal-functions user-functions)))]
       (map (fn [x] {:candidate x :type (resolve-completion-type-php x)}) completions-v)
       )
     )

   ## When starts with '\' it's known to be a class
   (php/str_starts_with what "\\")
   (let [classes (filter (complement  # not ran cause php/
                          (partialr            # discard internal AbstractFn classes
                           php/str_starts_with "Phel\\Lang\\AbstractFn@anonymous"))
                             (php/get_declared_classes))
         matches (filter (partialr php/str_starts_with (php/substr what 1))
                          classes)

         ## Add \ to the beginning of returned class names

         completions-v (map (partial str "\\") matches)  # return with beginning bslash
         ]
     (map (fn [x] {:candidate x :type "class"}) completions-v)
     )


   ## Otherwise might or might not be a class name

   # Complete Phel items / PHP classes
   (let [phel-def-names (all-phel-def-names)
         php-classes (filter (complement  # not ran cause php/
                              (partialr            # discard internal AbstractFn classes
                               php/str_starts_with "Phel\\Lang\\AbstractFn@anonymous"))
                             (php/get_declared_classes))
         all (concat phel-def-names php-classes)]
     (->> all
        (filter (partialr php/str_starts_with what))
        (map (fn [x] {:candidate x :type (resolve-completion-type-phel x)}))))
   )
  )

(defn phel-doc [sym]
  (with-output-buffer (doc sym)))

(comment
  (count (first (vector (php/get_declared_classes)))) # 828

  (count (first

          )
         )
  (take 5 (php/get_declared_classes))
  (take 5 (map identity (php/get_declared_classes)))

  ## All starting with Phel\\
  (filter (complement (partialr php/str_starts_with "Phel\\Lang\\AbstractFn@anonymous")) (php/get_declared_classes))

  (filter (complement (partialr php/str_starts_with "Phel\\")
                      ) (php/get_declared_classes))

  (take 5 (php/get_declared_classes))

  ## TODO Drop ones starting with Phel\Lang\AbstractFn@anonymous
  )


# (complete "php/te")
# (complete "php/preg")
# (complete "php/str")
# (complete "pr")

# (compile '(defn foo [x] x))

## TODO nREPL expected formatting

## https://docs.cider.mx/cider-nrepl/nrepl-api/ops.html#apropos
## https://github.com/ikappaki/basilisp-nrepl-async/blob/main/src/basilisp_nrepl_async/nrepl_server.lpy#L176

(defn- apropos [what]
  (let [phel-defs (all-phel-def-names)
        matching-phel-defs (filter (partialr php/str_contains what) phel-defs)
        php-defs (php/get_defined_functions)
        php-defs (concat (php/aget php-defs "user")
                         (php/aget php-defs "internal"))
        matching-php-defs (filter (partialr php/str_contains what)
                                  php-defs)]
    (concat
     (map (partialr make-definition "function" "function")
          matching-phel-defs)
     (map (fn [def] (-> (make-definition def "function" "function")
                      (put :name (str "php/" def))))
          matching-php-defs))))




# (apropos "array")

(defn- definition-properties [id properties]
  (cond
    # php defs
   (php/str_starts_with id "php/")
   (let [php-name (php/substr id 4)]
     (if (php/function_exists php-name)
       (make-definition php-name "function" "function")
       {}))

   # phel defs
   (some? (partial = id) (all-phel-def-names))
   (make-definition id "function" "function")

   #default
   {}))

# (definition-properties "str" [])

(defn- find-functions [name]
  (cond
    # php defs
   (php/str_starts_with name "php/")
   (let [php-name (php/substr name 4)]
     (if (php/function_exists php-name)
       [(make-definition php-name "function" "function")]
       []))

   # phel defs
   (some? (partial = name) (all-phel-def-names))
   [(make-definition name "function" "function")]

   # otherwise
   []))

# (find-functions "php/array_merge")
# (find-functions "str")
# (find-functions "lala")

(defn- find-variables [name]
  [])

(defn- find-definitions [name type] ## TODO
  (concat
   (if (or (not type)
           (= type "function"))
     (find-functions name)
     [])
   (if (or (not type)
           (= type "variable"))
     (find-variables name)
     [])))

# (find-definitions "php/array_merge" "function")
# (find-definitions "php/array_merges" "function")
# (find-definitions "lala" "function")
# (find-definitions "php/array_merge" nil)
# (find-definitions "str" nil)
(comment

  (defn handle-request []
    (let [request (http/request-from-globals)
          uri (get request :uri)]
      (when (and (= (get request :method) "POST")
                 (= (get uri :path) "/ilt"))
        (let [operation (json-decode-value (php/json_decode (php/file_get_contents "php://input") true))]
          (case (get operation :method)
            "evaluate"
            (let [expr (first (get operation :params))]
              (try
                (let [res (eval (read-string expr))]
                  (jsonrpc-result operation
                                  {:type (type res)
                                   :repr (print-str res)
                                   :kind (ilt-kind-of (type res))}  # useless?
                                  ))
                (catch \Exception e
                  (jsonrpc-error operation (php/-> e (getMessage))))))

            "compile"  # TODO should be "macroexpand?"
            (let [expr (first (get operation :params))]
              (try
                (let [res (compile (read-string expr))]
                  (jsonrpc-result operation res))
                (catch \Exception e
                  (jsonrpc-error operation (php/-> e (getMessage))))))

            "complete"
            (let [what (first (get operation :params))]
              (jsonrpc-result operation (complete what)))

            "get_definition_properties"
            (let [def (first (get operation :params))
                  props (second (get operation :params))]
              (jsonrpc-result operation (definition-properties def props)))

            "apropos"
            (let [what (first (get operation :params))]
              (jsonrpc-result operation (apropos what)))

            "find_definitions"
            (let [name (get (get operation :params) 0)
                  module (get (get operation :params) 1)
                  type (get (get operation :params) 2)]
              (jsonrpc-result operation (find-definitions name type))) #

            true
            (print "Error: invalid operation"))

          ## We handled the ILT jsonrpc request. Quit now.
          (php/exit 0)
          ))))
  ## (get [] 3)
  ## (+ 2 2)

  ## (php/str_starts_with "this is a test" "this")
  ## (php/str_starts_with "this is a test" "that")

  ## (lalal)

  ## (http/request-from-globals)

  ## (php/json_encode 22)

  ## (php/function_exists "count")
  ## (php/-> (php/new \ReflectionFunction "count") (getParameters))
  ## (php/-> (php/new \ReflectionFunction "count") (getDocComment))

  ## (php/-> (php/new \ReflectionFunction "array_merge") (getParameters))
  ## (php/-> (php/new \ReflectionFunction "array_merge") (getDocComment))
  ## (php/-> (php/new \ReflectionFunction "array_merge") (getName))
  ## (php/-> (php/new \ReflectionFunction "array_merge") (getNamespaceName))
  ## (php/-> (php/new \ReflectionFunction "array_merge") (getReturnType))
  ## (php/-> (php/new \ReflectionFunction "array_merge") (getFilename))

  ## (php/get_class_methods "Symfony\Component\String\AbstractString")


  )


## Bencode conversion utilities

(defn valid-key?
  "Checks if `v` is a valid Bencode key or can be converted to a Bencode key."
  [v]
  (or (int? v) (float? v) (symbol? v) (keyword? v) (string? v)))

(declare phel->php [x])

(defn- phel-iterable->php [x]
  (let [arr (php/array)]
    (foreach [k v x]
      (when-not (valid-key? k)
        (throw (php/new \InvalidArgumentException "Key can only be an integer, float, symbol, keyword or a string.")))
      (php/aset arr (phel->php k) (phel->php v)))
    arr))

(defn phel->php
  "Convert a Phel data type to a 'bencode compatible' value."
  [x]
  (cond
    (php/is_iterable x) (phel-iterable->php x)
    (symbol? x) (name x)
    (keyword? x) (name x)  # TODO should use str to keep keyword recognizable from strings (?)
    (float? x) (str x)     #      see Clojure for reference
    true x))

(defn php->phel
  "Convert a php data structure to a 'phel compatible' value."
  [x]
  (cond
    (indexed? x) (for [v :in x] (php->phel v))
    (php-array? x) (let [hashmap (transient {})]
                     (foreach [k v x]
                       (put hashmap (keyword k) (php->phel v)))
                     (persistent hashmap))
    true x))

(defn bencode-encode
  "Returns the bencode representation of a value."
  [value]
  (when (php/is_resource value)
    (throw (php/new \InvalidArgumentException "Value can be any type except a resource.")))
  (php/:: \Rhilip\Bencode\Bencode (encode (phel->php value))))

(defn bencode-decode
  "Decodes a bencode string."
  [s]
  (when-not (string? s) (throw (php/new \InvalidArgumentException "Bencode must be a string.")))
  ## Calling decode keeping returned format as array, otherwise ArrayObjects are returned
  ## https://github.com/arokettu/bencode/blob/7bd5447c34846476822c01cb62c0765f94a89e8c/docs/decoding.rst#lists-and-dictionaries
  (let [php-data (php/:: \Rhilip\Bencode\Bencode
                         (decode s))] # dictType
    (php->phel php-data)))


## \Rhilip\Bencode\Bencode

# // Decodes a BEncoded string
# Bencode::decode($string);

## // Encodes string/array/int to a BEncoded string
## Bencode::encode($data);

## catch \Rhilip\Bencode\ParseException
