(ns phel-nrepl\nrepl
  (:require phel\str :as str)
  (:require phel-nrepl\util :refer [callable->closure
                                    partialr
                                    all-phel-def-names
                                    apropos
                                    bencode-decode
                                    bencode-encode
                                    ])
  ## (:require phel\repl :refer [doc require use print-colorful println-colorful])
  (:require phel\repl :refer [resolve require use doc])
  )

#### Logging

(def log-handler (php/new \Amp\Log\StreamHandler (php/amp\bytestream\getstdout)))
(php/-> log-handler (setFormatter (php/new \Amp\Log\ConsoleFormatter)))

(def logger (php/new \Monolog\Logger "server"))
(php/-> logger (pushHandler log-handler))

## http://seldaek.github.io/monolog/doc/01-usage.html
(defn log-debug [s]
  (php/-> logger (debug (str s))))
(defn log-info [s]
  (php/-> logger (info (str s))))
(defn log-warning [s]
  (php/-> logger (warning (str s))))
(defn log-error [s]
  (php/-> logger (error (str s))))


#### Operation logic

(defn phel-doc [sym]
  (with-output-buffer (println "FOO")))

(defn complete "return list of completions for string" [what]
  (cond
    # If the thing to complete starts with php/, then return php completions.
   (str/starts-with? what "php/")
   (let [what-to-complete (php/substr what 4)]  # TODO Phel add subs fn
     (let [functions (php/get_defined_functions)
           internal-functions (get functions "internal")
           user-functions (get functions "user")

           completions-v (map (partial str "php/")
                              (filter (partialr str/starts-with? what-to-complete)
                                      (concat internal-functions user-functions)))]
       (map (fn [x] {:candidate x :type (cond (function? x) "function"
                                              (php-object? x) "class"   # TODO
                                              (php-resource? x) "class" # TODO
                                              true "?")}) completions-v)
       )
     )

   ## When starts with '\' it's known to be a class
   (str/starts-with? what "\\")
   (let [classes (filter (complement  # not ran cause php/
                          (partialr            # discard internal AbstractFn classes
                           str/starts-with? "Phel\\Lang\\AbstractFn@anonymous"))
                             (php/get_declared_classes))
         matches (filter (partialr str/starts-with? (php/substr what 1))
                          classes)

         ## Add \ to the beginning of returned class names

         completions-v (map (partial str "\\") matches)  # return with beginning bslash
         ]
     (map (fn [x] {:candidate x :type "class"}) completions-v))


   ## Otherwise might or might not be a class name

   # Complete Phel items / PHP classes
   (let [phel-def-names (all-phel-def-names)
         php-classes (filter (complement  # not ran cause php/
                              (partialr            # discard internal AbstractFn classes
                               str/starts-with? "Phel\\Lang\\AbstractFn@anonymous"))
                             (php/get_declared_classes))
         all (concat phel-def-names php-classes)]
     (->> all
        (filter (partialr str/starts-with? what))
        (map (fn [x] {:candidate x :type (cond (function? x) "function"
                                               (keyword? x)  "keyword"
                                               "?")}))))
   )
  )

## NOTE: cider-completion-annotations-alist defines supported types:

## Phel
## ("function" "f")
## ("keyword" "k")
## ("var" "v")
## ("macro" "m")  # how to distinct phel function from macro?
## ("namespace" "n")

## PHP
## ("class" "c")  # complete by startwith \ (?)
## ("static-method" "sm")
## ("field" "fi")
## ("import" "i")
## ("local" "l")
## ("method" "me")
## ("protocol" "p")
## ("protocol-function" "pf")
## ("record" "r")
## ("special-form" "s")
## ("static-field" "sf")
## ("type" "t")


#### Operation handlers

(declare ops)

(defn handle-clone [request send-fn]
  (let [resp {:new-session (str (rand-int 1000000)) :status ["done"]}]
    (send-fn request resp)))

(defn handle-describe [request send-fn]
  (send-fn request
           {:versions
            {:phel (php/:: \Composer\InstalledVersions (getVersion "phel-lang/phel-lang"))
             :php (php/phpversion)}
            ## Encoder sets {} as nil, so send :doc key â†“
            :ops (reduce (fn [acc x] (put acc x {:doc "Doc..."})) {} (keys ops))
            :status ["done"]}))

## d2:op8:describee

(defn handle-eval [request send-fn]
  (let [code-input (get request :code)
        _ (log-debug code-input)
        eval-res (eval (read-string (get request :code)))  # Reads the first phel expression from the string
        ## TODO parse all https://github.com/phel-lang/phel-lang/blob/acf3222dd6a1c30f277625018d0304c80d6db578/src/php/Compiler/CompilerFacade.php#L143
        eval-res-str (str eval-res)
        resp {:value eval-res-str :status ["done"]}]
    (send-fn request resp)
    )
  )

## d4:code7:(+ 1 1)2:op4:evale

## https://docs.cider.mx/cider-nrepl/nrepl-api/ops.html#complete
(defn handle-complete [request send-fn]
  (let [prefix (get request :prefix)
        completions (complete prefix)
        resp {:completions completions :status ["done"]}]
    (send-fn request resp)))

## (bencode-encode {:op "complete" :prefix "prin"})
## d2:op8:complete6:prefix4:prine

(defn handle-apropos [request send-fn]  # WIP
  (let [matching-defs (apropos (get request :prefix))
        resp {:completions matching-defs :status ["done"]}]
    (send-fn request resp)))

(defn handle-macroexpand
  "fake macroexpand, compiling expr to PHP"
  [request send-fn]
  (let [result (compile (read-string (get request :code)))
        resp {:expansion result :status ["done"]}]
    (send-fn request resp)))

(defn handle-lookup
  "WIP lookup, used for info and lookup ops"
  [request send-fn]
  (let [sym (get request :sym)
        sym-doc (phel-doc sym)
        _ (log-debug (str "sym-doc: " sym-doc))
        info {## :arglists-str
              :file "TODO_file"
              :line 1
              :column 1
              :ns "TODO_ns"
              :status ["done"]
              :doc-fragments [{:type "text" :content sym-doc}]
              :name sym}
        resp info]  # {:info info}
    (send-fn request resp)))


## (bencode-encode {:op "macroexpand" :code "(def foo 1)"})
## d4:code11:(def foo 1)2:op11:macroexpande

## (defn handle-load-file []  # TODO
##   ## https://github.com/ikappaki/basilisp-nrepl-async/blob/main/src/basilisp_nrepl_async/nrepl_server.lpy#L285
##   []
##   )

(def ops
  "A map of operations supported by the nREPL server (as keywords) to function
  handlers for those operations."
  {:eval        handle-eval      # WIP
   :clone       handle-clone     # TODO
   :complete    handle-complete  # DONE
   :describe    handle-describe  # DONE
   :macroexpand handle-macroexpand

   :lookup      handle-lookup
   :info        handle-lookup     # cider-nrepl middleware

   ## :apropos   handle-apropos # WIP
   ## :eldoc     handle-lookup     # cider-nrepl middleware
   ## :close     handle-close
   ## :load-file handle-load-file
   ## :classpath handle-classpath
   })


## TODO response-for-mw middleware ?
## https://github.com/basilisp-lang/basilisp/blob/main/src/basilisp/contrib/nrepl_server.lpy#L51
(defn- make-send-fn [socket]
  (fn [_request response]
    (try
      (let [response (put response :id (get _request :id))
            response (if (get response :session)
                       response
                       (put response :session (get _request :session)))
            response-bencode (bencode-encode response)]
        (log-debug (str "request: " _request))
        (log-debug (str "response: " response))
        ## (log-debug (str "SENDING: " response-bencode))
        (php/-> socket (write response-bencode)))
      (catch \Exception e
        (log-error (str "make-send-fn ERROR: " e))))))


(defn- handle-request [request send-fn]

  (let [op (get request :op)
        op-fn (get ops (keyword op))]  # keyword conversion added here
    (if op-fn
      (op-fn request send-fn)
      (do
        (log-warning (str "Unhandled operation" op))
        (send-fn request {"status" ["error" "unknown-op" "done"]}))))
  )

#### Server

(def server-address "127.0.0.1")
(def port 8888)

(def server (php/amp\socket\listen (str server-address ":" port)))
(def address (php/-> server (getAddress)))

(log-info (str "nREPL server started on port " port " on host "
               server-address " - nrepl://" server-address ":" port "\n"))
(log-info "TODO send startup message direct to stdout")

(loop []
  (when-let [socket (php/-> server (accept))]
    (php/amp\async
     (callable->closure
      (fn []
        (let [send-fn (make-send-fn socket)]
          (log-info (str "accepted connection from " address))
          (loop []
            (when-let [chunk (php/rtrim (php/-> socket (read)))]
              (try
                ## (log-debug (str "RECEIVED: " chunk))
                (handle-request (bencode-decode chunk) send-fn)
                (catch
                    \Exception e (log-error (str "UNKNOWN HANDLING ERROR: " e))))
              (recur)))
          (php/-> socket (end))))))
    (recur)))
